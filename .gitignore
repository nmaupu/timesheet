#from flask import Flask, request, jsonify, send_from_directory
from datetime import datetime, timedelta
import os
import json
import threading
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build

app = Flask(__name__, static_folder='static')

# Global in-memory store for unsynced events
pending_events = {}
synced_events = set()

# Load Google API credentials
creds = Credentials.from_authorized_user_file('token.json', ['https://www.googleapis.com/auth/calendar'])
service = build('calendar', 'v3', credentials=creds)

CALENDAR_ID = 'BeReal timesheet'

@app.route('/')
def index():
    return send_from_directory('static', 'index.html')

@app.route('/<path:path>')
def static_proxy(path):
    return send_from_directory('static', path)

@app.route('/event', methods=['POST'])
def register_event():
    data = request.json
    day = data['date']  # format YYYY-MM-DD
    status = data['status']  # 'work', 'absence', or None
    synced = data.get('synced', False)

    if synced and day in synced_events:
        # Mark for deletion
        pending_events[day] = None
    elif status:
        pending_events[day] = status
    elif day in pending_events:
        del pending_events[day]

    return jsonify({'success': True, 'pending': pending_events})

@app.route('/sync', methods=['POST'])
def sync_events():
    results = {'created': [], 'deleted': []}

    for date_str, status in pending_events.items():
        event_id = None
        if status:
            # Create or update event
            event = {
                'summary': status,
                'start': {'date': date_str},
                'end': {'date': (datetime.strptime(date_str, '%Y-%m-%d') + timedelta(days=1)).strftime('%Y-%m-%d')},
            }
            created_event = service.events().insert(calendarId=CALENDAR_ID, body=event).execute()
            results['created'].append({'id': created_event['id'], 'date': date_str})
            synced_events.add(date_str)
        else:
            # Deletion
            events = service.events().list(calendarId=CALENDAR_ID, timeMin=date_str+'T00:00:00Z', timeMax=date_str+'T23:59:59Z').execute()
            for item in events.get('items', []):
                if item.get('summary') in ['work', 'absence']:
                    service.events().delete(calendarId=CALENDAR_ID, eventId=item['id']).execute()
                    results['deleted'].append({'id': item['id'], 'date': date_str})
                    synced_events.discard(date_str)

    pending_events.clear()
    return jsonify(results)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
 from flask import Flask, request, jsonify, send_from_directory
from datetime import datetime, timedelta
import os
import json
import threading
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build

app = Flask(__name__, static_folder='static')

# Global in-memory store for unsynced events
pending_events = {}
synced_events = set()

# Load Google API credentials
creds = Credentials.from_authorized_user_file('token.json', ['https://www.googleapis.com/auth/calendar'])
service = build('calendar', 'v3', credentials=creds)

CALENDAR_ID = 'BeReal timesheet'

@app.route('/')
def index():
    return send_from_directory('static', 'index.html')

@app.route('/<path:path>')
def static_proxy(path):
    return send_from_directory('static', path)

@app.route('/event', methods=['POST'])
def register_event():
    data = request.json
    day = data['date']  # format YYYY-MM-DD
    status = data['status']  # 'work', 'absence', or None
    synced = data.get('synced', False)

    if synced and day in synced_events:
        # Mark for deletion
        pending_events[day] = None
    elif status:
        pending_events[day] = status
    elif day in pending_events:
        del pending_events[day]

    return jsonify({'success': True, 'pending': pending_events})

@app.route('/sync', methods=['POST'])
def sync_events():
    results = {'created': [], 'deleted': []}

    for date_str, status in pending_events.items():
        event_id = None
        if status:
            # Create or update event
            event = {
                'summary': status,
                'start': {'date': date_str},
                'end': {'date': (datetime.strptime(date_str, '%Y-%m-%d') + timedelta(days=1)).strftime('%Y-%m-%d')},
            }
            created_event = service.events().insert(calendarId=CALENDAR_ID, body=event).execute()
            results['created'].append({'id': created_event['id'], 'date': date_str})
            synced_events.add(date_str)
        else:
            # Deletion
            events = service.events().list(calendarId=CALENDAR_ID, timeMin=date_str+'T00:00:00Z', timeMax=date_str+'T23:59:59Z').execute()
            for item in events.get('items', []):
                if item.get('summary') in ['work', 'absence']:
                    service.events().delete(calendarId=CALENDAR_ID, eventId=item['id']).execute()
                    results['deleted'].append({'id': item['id'], 'date': date_str})
                    synced_events.discard(date_str)

    pending_events.clear()
    return jsonify(results)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

token.json
